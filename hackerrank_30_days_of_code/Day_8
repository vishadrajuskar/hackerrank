// https://www.hackerrank.com/challenges/30-dictionaries-and-maps

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct _bin_s {
    char name[1024];
    long phone;
    struct _bin_s *left;
    struct _bin_s *right;
};

typedef struct _bin_s bin_t;

bin_t* findByName(const char *name, bin_t *map) {
    bin_t *cur=map;
    int found = 0;
    while (cur && !found) {
        int a = strcmp(name, cur->name);
        if (!a)
            found = 1;
        else if (a > 0)
            cur = cur->right;
        else
            cur = cur->left;
    }
    return cur;
}

void addToTree(bin_t *item, bin_t *map) {
    bin_t *cur = map;
    int inserted = 0;
    while (!inserted) {
        int a = strcmp(item->name, cur->name);
        if (a < 0) {
            if (cur->left)
                cur = cur->left;
            else {
                cur->left = item;
                inserted = 1;
            }
        } else {
            if (cur->right)
                cur = cur->right;
            else {
                cur->right = item;
                inserted = 1;
            }
        }
    }
}

int main() {
    char s[1024];
    bin_t *map=NULL;
    int t;
    scanf("%d",&t);

    while (t--) {
        bin_t *m = (bin_t*)malloc(sizeof(bin_t));
        scanf("%1023s %ld",m->name,&m->phone);
        m->left = m->right = NULL;
        if (map == NULL)
            map = m;
        else
            addToTree(m, map);
    }
    
    while (scanf("%1023s",s)!=EOF) {
        bin_t *i = findByName(s,map);
        if (i)
            printf("%s=%ld\n",i->name,i->phone);
        else
            printf("Not found\n");
    }
    return 0;
}
